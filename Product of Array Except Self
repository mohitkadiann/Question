#include<iostream>
#include<vector>
using namespace std ;
// this is the code with n space complexity in the optimal approach we will try to reduce the space complexity
int productExceptSelf(vector<int>& nums){
	int n = nums.size();
//        vector<int> ans(n,1);
//        vector<int> prefix(n,1);
//        vector<int> suffix(n,1);
//        //prefix array
//        for(int i = 1 ;i<n;i++){
//            prefix[i] = prefix[i-1]*nums[i-1];
//        }
//
//        //suffix array
//        for(int i = n-2;i>=0;i--){
//            suffix[i] = suffix[i+1]*nums[i+1];
//        }
//
//        //final ans after the product
//        for(int i = 0;i<n;i++){
//            ans[i] = prefix[i]*suffix[i];
//        }
//        return ans;



	// this is now the optimal approach
	
        vector<int> ans(n,1);
        for(int i = 1;i<n;i++){
            ans[i] = ans[i-1]*nums[i-1];
        }
        int suffix=1;
        for(int i=n-2;i>=0;i--){
            suffix*= nums[i+1];
            ans[i]*=suffix;
        }
        return ans;
}

int main(){
	vector<int> nums = {1,2,3,4};
	cout<<"The vector with product of the array without self is: "<<productExceptSelf(nums);
}
